<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RegexMatcher</name>
    </assembly>
    <members>
        <member name="T:RegexMatcher.Matcher">
            <summary>
            Library to store regular expressions with a supplied object, and return that object when evaluating an input and a matching regular expression is found.
            </summary>
        </member>
        <member name="F:RegexMatcher.Matcher.MatchPreference">
            <summary>
            Specify which sorting mode should be used when evaluating for a match.
            </summary>
        </member>
        <member name="M:RegexMatcher.Matcher.#ctor">
            <summary>
            Instantiates the object.
            </summary>
        </member>
        <member name="M:RegexMatcher.Matcher.Add(System.Text.RegularExpressions.Regex,System.Object)">
            <summary>
            Add a regular expression and return value to the evaluation dictionary.
            </summary>
            <param name="regex">Regular expression.</param>
            <param name="val">Value to return when a match is found.</param>
        </member>
        <member name="M:RegexMatcher.Matcher.Remove(System.Text.RegularExpressions.Regex)">
            <summary>
            Remove a regular expression from the evaluation dictionary.
            </summary>
            <param name="regex">Regular expression.</param>
        </member>
        <member name="M:RegexMatcher.Matcher.Get">
            <summary>
            Retrieve the evaluation dictionary.
            </summary>
            <returns>Dictionary containing regular expression and return value that is returned upon match.</returns>
        </member>
        <member name="M:RegexMatcher.Matcher.Exists(System.Text.RegularExpressions.Regex)">
            <summary>
            Check if a regular expression exists in the evaluation dictionary.
            </summary>
            <param name="regex">Regular expression.</param>
            <returns>True if found.</returns>
        </member>
        <member name="M:RegexMatcher.Matcher.AllMatches(System.String)">
            <summary>
            Extract all matches for a given input.
            </summary>
            <returns>List of values.</returns>
        </member>
        <member name="M:RegexMatcher.Matcher.ValueExists(System.Object)">
            <summary>
            Check if a value exists in the evaluation dictionary.  Returns true on the first match of the value.
            </summary>
            <param name="val">Object to match.</param>
            <returns>True if found.</returns>
        </member>
        <member name="M:RegexMatcher.Matcher.Match(System.String,System.Object@)">
            <summary>
            Evaluate the supplied string against the evaluation dictionary.
            </summary>
            <param name="inVal">The string to evaluate.</param>
            <param name="val">The object value mapped to the regular expression in the evaluation dictionary.</param>
            <returns>True if a match was found.</returns>
        </member>
        <member name="T:RegexMatcher.MatchPreferenceType">
            <summary>
            Specify how evaluation for a match should behave when multiple matches exist. 
            </summary>
        </member>
        <member name="F:RegexMatcher.MatchPreferenceType.First">
            <summary>
            When evaluating for a match and multiple matches are identified, return the first match.
            </summary>
        </member>
        <member name="F:RegexMatcher.MatchPreferenceType.LongestFirst">
            <summary>
            When evaluating for a match and multiple matches are identified, return the longest match.
            </summary>
        </member>
        <member name="F:RegexMatcher.MatchPreferenceType.ShortestFirst">
            <summary>
            When evaluating for a match and multiple matches are identified, return the shortest match.
            </summary>
        </member>
    </members>
</doc>
